"""keep original models untouched such that when an applicationneeds additional specific care, a new proxy may be created.export PATH=$OPENSHIFT_DATA_DIR/bin:$PATH"""import decimalfrom django.db import modelsfrom django.db.models import F, Qfrom foobar.models import test## manager provided custom queries#class MakerRegistrationManager(models.Manager):    def registrations(self, maker):        """straight follow relation                note: get_query_set changed to get_queryset in 1.6        """        return super(MakerRegistrationManager, self).get_query_set().filter(car__model__maker__name__exact=maker)        def dodge2010RegistrationsOrNonLuxury(self):        """use Q                    Q operators: & (AND) , | (OR), ~ (NOT or negate)        """        criteria = Q(date__year=2010) | ~Q(car__model__klass__name='Luxury')        dodge = Q(car__model__maker__name__exact='DODGE')        return super(MakerRegistrationManager, self).get_query_set().filter(dodge, criteria)        def overPricedSales(self, maker=''):        """use F        """        criteria = Q(price__gt = F('car__mrp') * 1.01) # or use: decimal.Decimal('1.01'))        if maker:            criteria = criteria & Q(car__model__maker__name=maker)        return super(MakerRegistrationManager, self).get_query_set().filter(criteria)            def makersHavingD(self):        """when django cannot help                        fall back to python dbi or django 'raw'                        https://docs.djangoproject.com/en/dev/topics/db/sql/#performing-raw-sql-queries                    """        from django.db import connection        cursor = connection.cursor()                sql = "SELECT test_maker.name FROM test_maker WHERE test_maker.name LIKE %s"        cursor.execute(sql, ['%%D%%'])                 ret_list = []        for rd in cursor.fetchall():            ret_list.append(rd[0])                    return ret_list    class Registration(test.models.Registration):    class Meta:        proxy = True        maker_registrations = MakerRegistrationManager()    def run():        dodge2012 = Registration.objects.filter(date__year=2012, car__model__maker__name__exact='DODGE')    print "total dodge 2012 sold: ", dodge2012.count()        print    print "doge registrations: ", Registration.maker_registrations.registrations('DODGE').count()        print    print "dodge2010RegistrationsOrNonLuxury: ", Registration.maker_registrations.dodge2010RegistrationsOrNonLuxury().count()        print    print "doge overPricedSales: ", Registration.maker_registrations.overPricedSales('DODGE').count()        print     print "all makers: ", Registration.maker_registrations.makersHavingD()        