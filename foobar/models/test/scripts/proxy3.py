"""keep original models untouched such that when an applicationneeds additional specific care, a new proxy may be created.export PATH=$OPENSHIFT_DATA_DIR/bin:$PATHfilters     - readables        - field filter    - writables        - field fiter    - deletables    - can-create    """import decimal, uuidfrom django.db import modelsfrom django.db.models import F, Qfrom django.db.models.query import QuerySetfrom foobar.models import test## queryset provided custom query filters#class MyQuerySet(QuerySet):    def dodge2012(self):        return self.filter(car__year=2012, car__model__maker__name='DODGE')        def below_mrp(self):        return self.filter(price__lt = F('car__mrp'))        #    # queryset db write related methods    # ===============================================================================================    #    # from db.models.manager.py -    #    #   manager.'bulk_create', 'create', 'get_or_create', 'select_for_update', 'update'    #    # all dispatched to:    #    #   queryset.***    #    # queryset. - 'create', 'delete', '', 'update'    #    def create(self, *args, **kwargs):        """call instance init and save methods                so logic should go to model instance                per django doc, this is shorthand for            o = model(kwargs)            o.save()        """        print '@MyQuerySet.create'        return super(MyQuerySet, self).create(*args, **kwargs)    #    # batch operations    #            def update(self, *args, **kwargs):        """bypass instance's save method. so logic should go here ...                   apply update permission filter or pull records, update one by one        """        print '@MyQuerySet.update, count: ', self.count()        return super(MyQuerySet, self).update(*args, **kwargs)            def delete(self, *args, **kwargs):        """bypass instance's delete method, so logic should go here ...                   apply delete permission filter or pull records, delete one by one        """        print '@MyQuerySet.delete, count: ', self.count()        return super(MyQuerySet, self).delete(*args, **kwargs)        #    # disable them    #    def get_or_create(self, *args, **kwargs):        print '@MyQuerySet.get_or_create'        def bulk_create(self, *args, **kwargs):        print '@MyQuerySet.bulk_create'            def select_for_update(self, *args, **kwargs):        print '@MyQuerySet.select_for_update'            class MyRegistrationManager(models.Manager):    def get_query_set(self):        queryset = MyQuerySet(self.model)        #        #queryset.filter(can-access)        #        return queryset        class Registration(test.models.Registration):    class Meta:        proxy = True        objects = MyRegistrationManager()             #    # instance methods    #    def __init__(self, *args, **kwargs):        super(Registration, self).__init__(*args, **kwargs)        if self.id:            print '@proxy.__init__ - pulling record - RECORD READ ACCESS RULES ...'        else:            print '@proxy.__init__ - creating record'            def save(self, *args, **kwargs):        if self.id:            print '@proxy.save - RECORD UPDATE RULES ..'        else:            print '@proxy.save - RECORD CREATION RULES ..'                return super(Registration, self).save(*args, **kwargs)            def delete(self, *args, **kwargs):        print '@proxy.delete - RECORD DELETION RULES ...'        return super(Registration, self).delete(*args, **kwargs)            def __unicode__(self):        return u'%s: %s %s' % (self.__class__, self.car.year, self.car.model.name)                    def test_instance_methods():    """    dodge_model = test.models.Maker.objects.get(name='DODGE').mdl_set.all()[0]    dodge_car = dodge_model.car_set.filter(year__gt=2000)[0]    dodge_registration = dodge_car.registration_set.all()[0]    """        dodge_registrations = Registration.objects.filter(car__model__maker__name='DODGE')[:5]    print    print dodge_registrations    print        dodge_registration = Registration.objects.filter(car__model__maker__name='DODGE')[0]        fields = ['date', 'state', 'zip', 'reg_type_car', 'car', 'price','notes']    d = { f:getattr(dodge_registration, f) for f in fields}        d['vin'] = uuid.uuid4().hex.upper()        new_registration = Registration(**d)    new_registration.save()    id = new_registration.id    print    print new_registration    print        new_registration.notes = "record update"    new_registration.save()        print    new_registration.delete()        assert Registration.objects.filter(id=id).exists() == False    def test_queryset():    qset = Registration.objects.filter(car__model__maker__name='DODGE')        dodge_registration = qset[0]    fields = ['date', 'state', 'zip', 'car', 'price','notes']    d = { f:getattr(dodge_registration, f) for f in fields}    d['reg_type_car'] = test.models.Registration.OTHER        for i in range(3):        print        print '... creating record ..............'        d['vin'] = uuid.uuid4().hex.upper()        Registration.objects.create(**d)        qset = Registration.objects.filter(car__model__maker__name='DODGE', reg_type_car=test.models.Registration.OTHER)    print    print '.... update .... '    qset.update(price=F('price')*decimal.Decimal('0.95'))        print    print '.... delete ...'    qset.delete()        def run():    test_instance_methods()        print    test_queryset()        